@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    @using StackOverflow.Web.Models.QuestionModels;
    ViewData["Title"] = "Question Details";
}
@model QuestionDetailsModel
<div class="container mt-4">
    <h4>Question</h4>
</div>
<div class="container question-details">
    <div class="question-list-message">
    </div>
    <partial name="_ResponsePartial" />
        <div class="row my-3">
        <div class="col">
            <div class="card">
                <div class="card-body d-flex">
                    <div class="col-1">

                        <div>
                            <a class="up-vote" data-id="@Model.Question.Id.ToString("N")"><i class=" fa fa-caret-up fa-2x"></i></a>
                        </div>
                        <div>
                            <a class="down-vote" data-id="@Model.Question.Id.ToString("N")"><i class="fa fa-caret-down fa-2x"></i></a>
                        </div>
                    </div>

                    <div class="col-11">
                        <b>@Model.Question.Title</b>
                        <p>@Model.Question.Body</p>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="mr-3">
                        Votes: <span class="vote-count-@Model.Question.Id.ToString("N")">@Model.Question.Votes?.Sum(vote => (int)vote.VoteType)</span>
                    </div>
                    <div>
                        Asked By: @(Model.Question.User != null ? Model.Question.User.FirstName : "")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container my-4">
    <h4>Answers: <span class="answer-count"> (@Model.Question.Answers?.Count())</span></h4>
</div>
<div class="container question-list">
    <div class="question-list-message">
    </div>
    <partial name="_ResponsePartial" />
    @if(Model.Question?.Answers?.Count()>0)
    @foreach (var answer in Model.Question.Answers)
    {
        <div class="row my-3">
            <div class="col">
                <div class="card">
                    <div class="card-body d-flex">
                        <div class="col-1">

                            <div>
                                    <a class="up-vote" data-id="@answer.Id.ToString("N")"><i class=" fa fa-caret-up fa-2x"></i></a>
                            </div>
                            <div>
                                    <a class="down-vote" data-id="@answer.Id.ToString("N")"><i class="fa fa-caret-down fa-2x"></i></a>
                            </div>
                        </div>

                        <div class="col-11">
                                <p>@answer.Body</p>
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div class="mr-3">
                                Votes: <span class="vote-count-@answer.Id.ToString("N")">@answer.Votes?.Sum(vote => (int)vote.VoteType)</span>
                        </div>
                        <div>
                                Answered By: @(answer.User != null ? answer.User.FirstName : "")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="container">
    <div class="row justify-content-center">
        <div class="col">
            <div class="mt-5">
                <form asp-action="Create" asp-controller="Answer" asp-area="" method="post" asp-antiforgery="true">
                    <div class="mb-3">
                        <label for="Body" class="form-label fw-bolder">Your answer</label>
                        <textarea class="form-control" for="Body" rows="4"></textarea>
                        <span for="Body" class="text-danger"></span>
                    </div>
                    <div class="mb-3 text-center">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            let loginMessage = 'To vote, you need to <a href="/Account/Login" class="alert-link">login</a>.';
            $(".up-vote").on("click", function (e) {
                let id = $(this).data('id')
                $.ajax({
                    url: '@Url.Action("UpdateVote", "Question")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    data: {
                        questionId: $(this).data('id'),
                        voteType: "UpVote"
                    },
                    success: function (response) {
                        if (response === "NewVoteInserted") {
                            incrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                        else if (response === "VoteUpdated") {
                            incrementVoteCount(id);
                            incrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                        else if (response === "VoteRemoved") {
                            decrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 401) {
                            // Unauthorized access
                            showVoteAlert(loginMessage, "danger")
                        }
                        else {
                            // Other error,
                            console.error("Error: " + xhr.responseText);
                        }
                    }
                });
            });


            $(".down-vote").click(function (e) {
                let id = $(this).data('id')
                $.ajax({
                    url: '@Url.Action("UpdateVote", "Question")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    data: {
                        questionId: $(this).data('id'),
                        voteType: "DownVote"
                    },
                    success: function (response) {
                        if (response === "NewVoteInserted") {
                            decrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                        else if (response === "VoteUpdated") {
                            decrementVoteCount(id);
                            decrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                        else if (response === "VoteRemoved") {
                            incrementVoteCount(id);
                            showVoteAlert(response, "success")
                        }
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 401) {
                            // Unauthorized access
                            showVoteAlert(loginMessage, "danger")
                        }
                        else {
                            // Other error
                            console.error("Error: " + xhr.responseText);
                        }
                    }
                });
            });

            function incrementVoteCount(id) {
                let voteCountElement = $(".vote-count-" + id);
                let currentCount = parseInt(voteCountElement.text());
                voteCountElement.text(currentCount + 1);
            }

            function decrementVoteCount(id) {
                let voteCountElement = $(".vote-count-" + id);
                let currentCount = parseInt(voteCountElement.text());
                voteCountElement.text(currentCount - 1);
            }

            function showVoteAlert(message, type) {
                // Create a Bootstrap danger alert
                var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                    message +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">';

                // Append the alert to the body
                $('.question-list-message').append(alertHtml);
            }
        });


    </script>
}